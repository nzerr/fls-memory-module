{"version":3,"sources":["logo.svg","components/card/card.jsx","components/modal/modal.js","components/board/board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","card","click","_this2","react_default","a","createElement","className","close","complete","onClick","clicked","src","alt","Board","cards","cardsList","flippedCards","foundCards","turns","totalCardsNumber","win","shuffle","concat","map","name","index","push","fail","length","components_card_card","key","handleClick","_this3","flippedCard","setState","setTimeout","check","flippedCard1","flippedCard2","cardsFound","checkWin","alert","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","App","logo","board_board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42ec7b6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './card.scss';\nimport Modal from '../modal/modal';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n\n    }\n  }\n  clicked(card) {\n    this.props.click(card)\n  }\n  render() {\n    return (\n      <div className={\"card\" + (!this.props.close ? ' opened' : '') + (this.props.complete ? ' matched' : '')} onClick={() => this.clicked(this.props.card)}>\n        <div className=\"front\">\n          ?\n        </div>\n        <div className=\"back\">\n            <img src={\"https://raw.githubusercontent.com/nzerr/fls-memory-module/master/public/img/\" + this.props.card + \".jpg\"} alt={this.props.card} />\n            <div className=\"back-text\"><h4>{this.props.card}</h4></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card;","import React, { Component } from 'react';\r\nimport './modal.css';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const showHideClassName = this.props.show ? \"modal display-block\" : \"modal display-none\";\r\n\r\n        return (\r\n            <div className={showHideClassName}>\r\n                <section className=\"modal-main\">\r\n                    {this.props.children}\r\n                    <button onClick={this.props.handleClose}>Fermer</button>\r\n                </section>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport Card from '../card/card';\r\nimport './board.css';\r\nimport '../card/card.scss';\r\n// import Modal from '../modal/modal';\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cards:\r\n                [\r\n                    'Boson de Higgs',\r\n                    'Bottom Quark',\r\n                    'Charm Quark',\r\n                    'Electron',\r\n                    'Gluon',\r\n                    'Muon',\r\n                    'Neutron',\r\n                    'Photon',\r\n                    'Proton',\r\n                    'Strange Quark',\r\n                    'Top Quark',\r\n                    'Up Quark',\r\n                ],\r\n\r\n            //['angular2', 'vue', 'react', 'grunt', 'phantomjs', 'ember', 'babel', 'ionic', 'gulp', 'meteor', 'yeoman', 'yarn', 'nodejs', 'bower', 'browserify'],\r\n            cardsList: [],\r\n            flippedCards: [],\r\n            foundCards: 0,\r\n            turns: 0,\r\n            totalCardsNumber: 0,\r\n            win: false\r\n\r\n        }\r\n\r\n        let cards = this.state.cards\r\n\r\n        cards = this.shuffle(cards.concat(cards));\r\n\r\n        let cardsList = [];\r\n        cards.map((name, index) => {\r\n            cardsList.push({\r\n                index,\r\n                name,\r\n                close: true,\r\n                complete: false,\r\n                fail: false\r\n            })\r\n        })\r\n\r\n        this.state.cards = cards;\r\n        this.state.cardsList = cardsList;\r\n        this.state.totalCardsNumber = cards.length / 2;\r\n        this.state.win = false\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"playground\">\r\n                {\r\n                    this.state.cardsList.map((card, index) => {\r\n                        return <Card\r\n                            key={card.index}\r\n                            card={card.name}\r\n                            click={() => { this.handleClick(card.name, index) }}\r\n                            close={card.close}\r\n                            complete={card.complete} />\r\n\r\n                    })\r\n                }\r\n\r\n\r\n            </div>);\r\n    }\r\n\r\n    handleClick(name, index) {\r\n        if (this.state.flippedCards.length < 2) {\r\n            let flippedCard = {\r\n                name,\r\n                index\r\n            }\r\n\r\n            let cardsList = this.state.cardsList\r\n            let flippedCards = this.state.flippedCards\r\n\r\n            cardsList[index].close = false\r\n            flippedCards.push(flippedCard)\r\n            this.setState({\r\n                flippedCards: flippedCards,\r\n                cardsList: cardsList\r\n            })\r\n        }\r\n\r\n        if (this.state.flippedCards.length === 2) {\r\n            setTimeout(() => {\r\n                this.check()\r\n            }, 750)\r\n        }\r\n    }\r\n\r\n    check() {\r\n        let cardsList = this.state.cardsList;\r\n        let flippedCard1 = this.state.flippedCards[0];\r\n        let flippedCard2 = this.state.flippedCards[1];\r\n        let cardsFound = this.state.foundCards;\r\n\r\n        if (flippedCard1 && flippedCard2) {\r\n\r\n            if ((flippedCard1.name === flippedCard2.name) && (flippedCard1.index !== flippedCard2.index)) {\r\n                cardsList[flippedCard1.index].complete = true\r\n                cardsList[flippedCard2.index].complete = true\r\n                cardsFound++;\r\n\r\n            } else {\r\n                cardsList[flippedCard1.index].close = true\r\n                cardsList[flippedCard2.index].close = true\r\n            }\r\n            this.setState({\r\n                cardsList: cardsList,\r\n                flippedCards: [],\r\n                foundCards: cardsFound,\r\n                turns: this.state.turns + 1\r\n            });\r\n            this.checkWin();\r\n        }\r\n    }\r\n\r\n    checkWin() {\r\n        if (this.state.foundCards === this.state.totalCardsNumber) {\r\n            this.setState({\r\n                win: true\r\n            });\r\n\r\n            alert(\"Win!\");\r\n\r\n        }\r\n    }\r\n\r\n    shuffle(array) {\r\n        let currentIndex = array.length, temporaryValue, randomIndex;\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n}\r\n\r\nexport default Board;","// import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import './components/board/board.css';\n\nimport React, { Component } from 'react';\nimport Board from './components/board/board';\nimport Modal from './components/modal/modal';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" /><h1>Fête Le Savoir - Memory des quantas!</h1>\n        </header>\n        <div className=\"Game\">\n\n          <Board></Board>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}